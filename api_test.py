#!/usr/bin/env python3\n\"\"\"\nAPI Test - Verify Simple App APIs Work\nTests that the missing API endpoints are now working.\n\"\"\"\n\nimport asyncio\nimport sys\nimport logging\nfrom pathlib import Path\n\n# Setup logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\nasync def test_simple_app_apis():\n    \"\"\"Test that the simple app has all required APIs\"\"\"\n    logger.info(\"🔍 Testing simple app APIs...\")\n    \n    try:\n        # Add src to Python path\n        project_root = Path.cwd()\n        sys.path.insert(0, str(project_root / \"src\"))\n        \n        # Import the simple app\n        from src.web.simple_app import app\n        \n        logger.info(\"✅ Successfully imported simple app\")\n        \n        # Check that required routes exist\n        routes = [route.path for route in app.routes]\n        \n        required_routes = [\n            \"/api/huggingface/status\",\n            \"/api/huggingface/login\", \n            \"/api/benchmarks/status\",\n            \"/api/evaluations/status/{client_id}\",\n            \"/api/evaluations/active\",\n            \"/api/evaluate\",\n            \"/ws/{client_id}\"\n        ]\n        \n        missing_routes = []\n        for route in required_routes:\n            if route not in routes:\n                missing_routes.append(route)\n        \n        if missing_routes:\n            logger.error(f\"❌ Missing routes: {missing_routes}\")\n            return False\n        else:\n            logger.info(\"✅ All required API routes found\")\n            return True\n        \n    except Exception as e:\n        logger.error(f\"❌ Simple app API test failed: {e}\")\n        return False\n\n\nasync def test_simple_app_startup():\n    \"\"\"Test that the simple app can start up\"\"\"\n    logger.info(\"🧪 Testing simple app startup...\")\n    \n    try:\n        # Add src to Python path\n        project_root = Path.cwd()\n        sys.path.insert(0, str(project_root / \"src\"))\n        \n        # Import components\n        from src.web.simple_app import app, evaluator, orchestrator\n        \n        logger.info(\"✅ All components imported successfully\")\n        logger.info(f\"📊 Evaluator type: {type(evaluator).__name__}\")\n        logger.info(f\"📊 Orchestrator type: {type(orchestrator).__name__}\")\n        \n        # Test dataset availability\n        datasets_status = await orchestrator.dataset_manager.get_available_datasets()\n        logger.info(f\"📊 Datasets available: {datasets_status}\")\n        \n        return True\n        \n    except Exception as e:\n        logger.error(f\"❌ Simple app startup test failed: {e}\")\n        return False\n\n\nasync def main():\n    \"\"\"Run API tests\"\"\"\n    logger.info(\"🚀 Starting Simple App API Tests\")\n    logger.info(\"=\" * 40)\n    \n    tests = [\n        (\"Simple App APIs\", test_simple_app_apis),\n        (\"Simple App Startup\", test_simple_app_startup),\n    ]\n    \n    passed = 0\n    total = len(tests)\n    \n    for test_name, test_func in tests:\n        logger.info(f\"\\n📋 Running: {test_name}\")\n        try:\n            if await test_func():\n                passed += 1\n                logger.info(f\"✅ {test_name} PASSED\")\n            else:\n                logger.error(f\"❌ {test_name} FAILED\")\n        except Exception as e:\n            logger.error(f\"❌ {test_name} ERROR: {e}\")\n    \n    logger.info(\"\\n\" + \"=\" * 40)\n    logger.info(f\"📊 API TESTS RESULTS: {passed}/{total} tests passed\")\n    \n    if passed == total:\n        logger.info(\"🎉 ALL API TESTS PASSED!\")\n        logger.info(\"🚀 Missing API endpoints have been fixed!\")\n        logger.info(\"\")\n        logger.info(\"Fixed issues:\")\n        logger.info(\"  • ✅ /api/huggingface/status endpoint added\")\n        logger.info(\"  • ✅ /api/huggingface/login endpoint added\")\n        logger.info(\"  • ✅ WebSocket /ws/{client_id} endpoint added\")\n        logger.info(\"  • ✅ /api/evaluations/status/{client_id} endpoint added\")\n        logger.info(\"\")\n        logger.info(\"Next steps:\")\n        logger.info(\"1. python app.py\")\n        logger.info(\"2. Open: http://localhost:8000/evaluate\")\n        logger.info(\"3. Start evaluation - should complete properly now!\")\n        return True\n    else:\n        logger.error(\"💥 Some API tests failed - Check errors above\")\n        return False\n\n\nif __name__ == \"__main__\":\n    success = asyncio.run(main())\n    sys.exit(0 if success else 1)\n