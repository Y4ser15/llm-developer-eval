#!/usr/bin/env python3\n\"\"\"\nCleanup Script - Remove Redundant Files\nCleans up the project structure to have a single, professional entry point.\n\"\"\"\n\nimport os\nimport shutil\nfrom pathlib import Path\n\ndef cleanup_project():\n    \"\"\"Remove redundant and unused files\"\"\"\n    project_root = Path(__file__).parent\n    \n    # Files to remove (redundant/unused)\n    files_to_remove = [\n        \"dev_server.py.backup\",\n        \"working_demo.py\", \n        \"test_platform.py\",\n        \"local_model_evaluation.py\",\n        \"comprehensive_diagnostic.py\",\n        \"src/web/app.py\"  # Keep comprehensive_app.py\n    ]\n    \n    removed_files = []\n    \n    for file_path in files_to_remove:\n        full_path = project_root / file_path\n        if full_path.exists():\n            try:\n                if full_path.is_file():\n                    os.remove(full_path)\n                    removed_files.append(file_path)\n                    print(f\"‚úÖ Removed: {file_path}\")\n                elif full_path.is_dir():\n                    shutil.rmtree(full_path)\n                    removed_files.append(file_path)\n                    print(f\"‚úÖ Removed directory: {file_path}\")\n            except Exception as e:\n                print(f\"‚ùå Failed to remove {file_path}: {e}\")\n        else:\n            print(f\"‚ö†Ô∏è  File not found: {file_path}\")\n    \n    print(f\"\\nüßπ Cleanup complete! Removed {len(removed_files)} files/directories.\")\n    print(\"\\nüöÄ Single entry point: python app.py\")\n    print(\"üê≥ Docker deployment: docker-compose up\")\n    \nif __name__ == \"__main__\":\n    print(\"üßπ Cleaning up project structure...\")\n    cleanup_project()\n
